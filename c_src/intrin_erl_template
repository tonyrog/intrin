%%% @author Tony Rogvall <tony@rogvall.se>
%%% @copyright (C) 2013, Tony Rogvall
%%% @doc
%%%    simd instruction interface
%%% @end
%%% Created : 4 Apr 2013 by Tony Rogvall <tony@rogvall.se>

-module(intrin).

-on_load(init/0).

#define DEF_void_MMd_MMs(pfx,nm,dt,st) \
-export([nm/2]).
#define DEF_void_MMd(pfx,nm,dt) \
-export([nm/1]).
#define DEF_bool_MMd_MMs(pfx,nm,dt,st) \
-export([nm/2]).
#define DEF_void_MMd_imm8(pfx,nm,dt,vt) \
-export([nm/2]).
#define DEF_void_XMMd_XMMs1(pfx,nm,st) \
-export([nm/2]).
#define DEF_void_XMMd_XMMs(pfx,nm,dt,st) \
-export([nm/2]).
#define DEF_void_XMMd(pfx,nm,dt) \
-export([nm/1]).
#define DEF_bool_XMMd_XMMs(pfx,nm,dt,st) \
-export([nm/2]).
#define DEF_void_XMMd_imm8(pfx,nm,dt,vt) \
-export([nm/2]).
#define DEF_void_XMMd_XMMs_imm8(pfx,nm,dt,st,vt) \
-export([nm/3]).

#define DEF_void_Dd_Dn_Dm(pfx,nm,dd,dn,dm) \
-export([nm/3]).
#define DEF_void_Qd_Qn_Qm(pfx,nm,qd,qn,qm) \
-export([nm/3]).
#define DEF_void_Qd_Dn_Dm(pfx,nm,qd,dn,dm) \
-export([nm/3]).
#define DEF_void_Qd_Qn_Dm(pfx,nm,qd,dn,dm) \
-export([nm/3]).
#define DEF_void_Dd_Qn_Qm(pfx,nm,dd,qn,qm) \
-export([nm/3]).
#define DEF_void_Dd_Dn_Dm_Dk(pfx,nm,dd,dn,dm,dk) \
-export([nm/4]).
#define DEF_void_Qd_Qn_Qm_Qk(pfx,nm,qd,qn,qm,dk) \
-export([nm/4]).
#define DEF_void_Qd_Qn_Dm_Dk(pfx,nm,qd,qn,dm,dk) \
-export([nm/4]).

#include "mmx.inc"
#include "sse.inc"
#include "sse2.inc"
#include "sse3.inc"
#include "ssse3.inc"
#include "sse4.1.inc"
#include "neon.inc"

-export([mm_move/2]).
-export([mm_set/2]).
-export([mm_get/1]).
-export([mm_load/3]).

-export([vmov/2]).
-export([vset/2]).
-export([vget/1]).
-export([vld/3]).

-export([info/1]).

#undef DEF_void_XMMd_XMMs1
#undef DEF_void_XMMd_XMMs
#undef DEF_void_XMMd
#undef DEF_bool_XMMd_XMMs
#undef DEF_void_XMMd_imm8
#undef DEF_void_XMMd_XMMs_imm8
#undef DEF_void_MMd_MMs
#undef DEF_void_MMd
#undef DEF_bool_MMd_MMs
#undef DEF_void_MMd_imm8

#undef DEF_void_Dd_Dn_Dm
#undef DEF_void_Qd_Qn_Qm
#undef DEF_void_Qd_Dn_Dm
#undef DEF_void_Qd_Qn_Dm
#undef DEF_void_Dd_Qn_Qm
#undef DEF_void_Dd_Dn_Dm_Dk
#undef DEF_void_Qd_Qn_Qm_Qk
#undef DEF_void_Qd_Qn_Dm_Dk

init() ->
    Nif = filename:join([code:priv_dir(intrin),"intrin_nif"]),
    erlang:load_nif(Nif, 0).

#define DEF_void_XMMd_XMMs1(pfx,nm,dt) \
nm(_Dst,_Src) -> erlang:error(nif_not_loaded).
#define DEF_void_XMMd_XMMs(pfx,nm,dt,st) \
nm(_Dst,_Src) -> erlang:error(nif_not_loaded).
#define DEF_bool_XMMd_XMMs(pfx,nm,dt,st) \
nm(_Dst,_Src) -> erlang:error(nif_not_loaded).
#define DEF_void_XMMd_imm8(pfx,nm,dt,vt) \
nm(_Dst,_Imm8) -> erlang:error(nif_not_loaded).
#define DEF_void_XMMd_XMMs_imm8(pfx,nm,dt,st,vt) \
nm(_Dst,_Src,_Imm8) -> erlang:error(nif_not_loaded).
#define DEF_void_XMMd(pfx,nm,dt) \
nm(_Dst) -> erlang:error(nif_not_loaded).

#define DEF_void_MMd_MMs(pfx,nm,dt,st) \
nm(_Dst,_Src) -> erlang:error(nif_not_loaded).
#define DEF_bool_MMd_MMs(pfx,nm,dt,st) \
nm(_Dst,_Src) -> erlang:error(nif_not_loaded).
#define DEF_void_MMd_imm8(pfx,nm,dt,vt) \
nm(_Dst,_Imm8) -> erlang:error(nif_not_loaded).
#define DEF_void_MMd(pfx,nm,dt) \
nm(_Dst) -> erlang:error(nif_not_loaded).

#define DEF_void_Dd_Dn_Dm(pfx,nm,dd,dn,dm) \
nm(_D,_N,_M) -> erlang:error(nif_not_loaded).
#define DEF_void_Qd_Qn_Qm(pfx,nm,qd,qn,qm) \
nm(_D,_N,_M) -> erlang:error(nif_not_loaded).
#define DEF_void_Qd_Dn_Dm(pfx,nm,qd,dn,dm) \
nm(_D,_N,_M) -> erlang:error(nif_not_loaded).
#define DEF_void_Qd_Qn_Dm(pfx,nm,qd,dn,dm) \
nm(_D,_N,_M) -> erlang:error(nif_not_loaded).
#define DEF_void_Dd_Qn_Qm(pfx,nm,dd,qn,qm) \
nm(_D,_N,_M) -> erlang:error(nif_not_loaded).
#define DEF_void_Dd_Dn_Dm_Dk(pfx,nm,dd,dn,dm,dk) \
nm(_D,_N,_M,_K) -> erlang:error(nif_not_loaded).
#define DEF_void_Qd_Qn_Qm_Qk(pfx,nm,qd,qn,qm,qk) \
nm(_D,_N,_M,_K) -> erlang:error(nif_not_loaded).
#define DEF_void_Qd_Qn_Dm_Dk(pfx,nm,qd,qn,dm,dk) \
nm(_D,_N,_M,_K) -> erlang:error(nif_not_loaded).

#include "mmx.inc"
#include "sse.inc"
#include "sse2.inc"
#include "sse3.inc"
#include "ssse3.inc"
#include "sse4.1.inc"
#include "neon.inc"

mm_move(_Dst,_Src) -> erlang:error(nif_not_loaded).
mm_set(_Dst,_Data) -> erlang:error(nif_not_loaded).
mm_load(_Dst,_Offset,_Data) -> erlang:error(nif_not_loaded).
mm_get(_Src) -> erlang:error(nif_not_loaded).

vmov(_Dst,_Src) -> erlang:error(nif_not_loaded).
vset(_Dst,_Data) -> erlang:error(nif_not_loaded).
vld(_Dst,_Offset,_Data) -> erlang:error(nif_not_loaded).
vget(_Src) -> erlang:error(nif_not_loaded).

info(_Info) ->  erlang:error(nif_not_loaded).
